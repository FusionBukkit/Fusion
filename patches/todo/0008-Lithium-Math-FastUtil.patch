From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 21 Dec 2022 14:01:23 +0900
Subject: [PATCH] Lithium-Math-FastUtil

Lithium - CaffeineMC  - GPL 3.0
JettPack - Titaniumtown - GPL 3.0
Mirai - etil2jz - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index 2712832c753357896210072e698fed731b359b81..ff57936450ef0d3706c978ce484575452554fd13 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -219,10 +219,12 @@ public class FusionConfig {
     }
 
     public static boolean lithiumEnable = true;
+    public static boolean lithiumMathFastUtil = true;
 
     private static void lithiumConfig() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
         lithiumEnable = getBoolean("lithium.enable", lithiumEnable);
+        lithiumMathFastUtil = getBoolean("lithium.math.fast-util", lithiumMathFastUtil) && lithiumEnable;
     }
 
     private static void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index a4dc96b1a3bf309584657e3a1e7dfaea967f9425..16bbaae64a7be30842f6e488dd1eb6d0e5b3d3d1 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -191,7 +191,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public Direction getOpposite() {
-        return from3DDataValue(this.oppositeIndex);
+        return com.github.ipecter.fusion.FusionConfig.lithiumMathFastUtil ? VALUES[this.oppositeIndex] : from3DDataValue(this.oppositeIndex); // Fusion - Lithium: Math FastUtil
     }
 
     public Direction getClockWise(Direction.Axis axis) {
@@ -453,7 +453,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public static Direction getRandom(RandomSource random) {
-        return Util.getRandom(VALUES, random);
+        return com.github.ipecter.fusion.FusionConfig.lithiumMathFastUtil ? VALUES[random.nextInt(VALUES.length)] : Util.getRandom(VALUES, random); // Fusion - Lithium: Math FastUtil
     }
 
     public static Direction getNearest(double x, double y, double z) {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index cfb2e46b34b2982d6724f18214557fc80cf4adfa..da5f1a3225744d2bcfb1c43067d98eb6ebbe28e8 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -16,6 +16,17 @@ public class AABB {
     public final double maxY;
     public final double maxZ;
 
+    // Fusion start - Lithium: Math FastUtil
+    static {
+        if (com.github.ipecter.fusion.FusionConfig.lithiumMathFastUtil) {
+            assert Direction.Axis.X.ordinal() == 0;
+            assert Direction.Axis.Y.ordinal() == 1;
+            assert Direction.Axis.Z.ordinal() == 2;
+            assert Direction.Axis.values().length == 3;
+        }
+    }
+    // Fusion end
+
     public AABB(double x1, double y1, double z1, double x2, double y2, double z2) {
         this.minX = Math.min(x1, x2);
         this.minY = Math.min(y1, y2);
@@ -81,11 +92,39 @@ public class AABB {
     }
 
     public double min(Direction.Axis axis) {
-        return axis.choose(this.minX, this.minY, this.minZ);
+        // Fusion start - Lithium: Math FastUtil
+        if (com.github.ipecter.fusion.FusionConfig.lithiumMathFastUtil){
+            switch (axis.ordinal()) {
+                case 0: //X
+                   return this.minX;
+                case 1: //Y
+                    return this.minY;
+                case 2: //Z
+                    return this.minZ;
+            }
+            throw new IllegalArgumentException();
+        } else{
+            return axis.choose(this.minX, this.minY, this.minZ);
+        }
+        // Fusion end
     }
 
     public double max(Direction.Axis axis) {
-        return axis.choose(this.maxX, this.maxY, this.maxZ);
+        // Fusion start - Lithium: Math FastUtil
+        if (com.github.ipecter.fusion.FusionConfig.lithiumMathFastUtil){
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return this.maxX;
+                case 1: //Y
+                    return this.maxY;
+                case 2: //Z
+                    return this.maxZ;
+            }
+            throw new IllegalArgumentException();
+        } else{
+            return axis.choose(this.maxX, this.maxY, this.maxZ);
+        }
+        // Fusion end
     }
 
     @Override
