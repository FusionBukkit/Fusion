From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 21 Dec 2022 16:26:01 +0900
Subject: [PATCH] Lithium-Shapes-PrecomputeShapeArrays

Lithium - CaffeineMC  - GPL 3.0
JettPack - Titaniumtown - GPL 3.0
Mirai - etil2jz - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index 0b941224b23d114728fe2a9cc6f971c4e98e5032..58cf70e7a427a5a81f68b279d29d91c3c2a4397b 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -224,6 +224,7 @@ public class FusionConfig {
     public static boolean lithiumEntityFastRetrieval = true;
     public static boolean lithiumCollectionsGoals = true;
     public static boolean lithiumCollectionsGameRules = true;
+    public static boolean lithiumShapesPrecomputeShapeArrays = true;
 
     private static void lithiumConfig() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
@@ -233,6 +234,7 @@ public class FusionConfig {
         lithiumEntityFastRetrieval = getBoolean("lithium.entity.fast-retrieval", lithiumEntityFastRetrieval) && lithiumEnable;
         lithiumCollectionsGoals = getBoolean("lithium.collections.goals", lithiumCollectionsGoals) && lithiumEnable;
         lithiumCollectionsGameRules = getBoolean("lithium.collections.gamerules", lithiumCollectionsGameRules) && lithiumEnable;
+        lithiumShapesPrecomputeShapeArrays = getBoolean("lithium.shapes.precompute-shape-arrays", lithiumShapesPrecomputeShapeArrays) && lithiumEnable;
     }
 
     private static void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index 16bbaae64a7be30842f6e488dd1eb6d0e5b3d3d1..abdb242b144677449076e323c95314456dd34dcd 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -41,7 +41,7 @@ public enum Direction implements StringRepresentable {
     private final Direction.Axis axis;
     private final Direction.AxisDirection axisDirection;
     private final Vec3i normal;
-    private static final Direction[] VALUES = values();
+    public static final Direction[] VALUES = values(); // Fusion - Lithium: Shapes PrecomputeShapeArrays
     private static final Direction[] BY_3D_DATA = Arrays.stream(VALUES).sorted(Comparator.comparingInt((direction) -> {
         return direction.data3d;
     })).toArray((i) -> {
diff --git a/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java b/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java
index a544db042c8d2ecec8d323770552c4f10ca758a6..87ecedfd9d752bb8ae28cf97549acec8bbe8f756 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/CubePointRange.java
@@ -4,6 +4,7 @@ import it.unimi.dsi.fastutil.doubles.AbstractDoubleList;
 
 public class CubePointRange extends AbstractDoubleList {
     private final int parts;
+    private double scale; // Fusion - Lithium: Shapes PrecomputeShapeArrays
 
     CubePointRange(int sectionCount) {
         if (sectionCount <= 0) {
@@ -11,11 +12,18 @@ public class CubePointRange extends AbstractDoubleList {
         } else {
             this.parts = sectionCount;
         }
+        this.scale = 1.0D / sectionCount; // Fusion - Lithium: Shapes PrecomputeShapeArrays
     }
 
+    // Fusion start - Lithium: Shapes PrecomputeShapeArrays
+    /**
+     * @author JellySquid
+     * @reason Replace division with multiplication
+     */
     public double getDouble(int i) {
-        return (double)i / (double)this.parts;
+        return com.github.ipecter.fusion.FusionConfig.lithiumShapesPrecomputeShapeArrays ? i * this.scale : (double)i / (double)this.parts;
     }
+    // Fusion end
 
     public int size() {
         return this.parts + 1;
diff --git a/src/main/java/net/minecraft/world/phys/shapes/CubeVoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/CubeVoxelShape.java
index 68e89dbd79171627046e89699057964e44c40e7d..e533bacf08958c21bbfbd19f2ad930d9b8d24969 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/CubeVoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/CubeVoxelShape.java
@@ -5,14 +5,28 @@ import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
 
 public final class CubeVoxelShape extends VoxelShape {
+    private DoubleList[] list; // Fusion - Lithium: Shapes PrecomputeShapeArrays
+
     protected CubeVoxelShape(DiscreteVoxelShape voxels) {
         super(voxels);
+        // Fusion start - Lithium: Shapes PrecomputeShapeArrays
+        this.list = new DoubleList[Direction.VALUES.length];
+        for (Direction.Axis axis : Direction.Axis.VALUES) {
+            this.list[axis.ordinal()] = new CubePointRange(voxels.getSize(axis));
+        }
+        // Fusion end
     }
 
+    // Fusion start - Lithium: Shapes PrecomputeShapeArrays
+    /**
+     * @author JellySquid
+     * @reason Use the cached array
+     */
     @Override
     protected DoubleList getCoords(Direction.Axis axis) {
-        return new CubePointRange(this.shape.getSize(axis));
+        return com.github.ipecter.fusion.FusionConfig.lithiumShapesPrecomputeShapeArrays ? this.list[axis.ordinal()] : new CubePointRange(this.shape.getSize(axis));
     }
+    // Fusion end
 
     @Override
     protected int findIndex(Direction.Axis axis, double coord) {
