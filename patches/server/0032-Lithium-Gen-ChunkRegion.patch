From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Thu, 5 Jan 2023 13:04:30 +0900
Subject: [PATCH] Lithium-Gen-ChunkRegion

Lithium - CaffeineMC  - GPL 3.0
Mirai - etil2jz - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
index 366ff3477cc0d368d4eeace452bccc9435d92f63..e7371b42872e69e05bfb8fca14d1f2a9302d7e04 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
@@ -137,6 +137,7 @@ public class FusionWorldConfig {
     public boolean lithiumEntityFastPowderSnowCheck = true;
     public boolean lithiumAIRaid = true;
     public boolean lithiumBlockMovingBlockShapes = true;
+    public boolean lithiumGenChunkRegion = true;
 
     private void lithiumConfig() {
         lithiumCollectionsBlockEntityTickers = getBoolean("lithium.collections.block-entity-tickers", lithiumCollectionsBlockEntityTickers) && lithiumEnable;
@@ -145,6 +146,7 @@ public class FusionWorldConfig {
         lithiumEntityFastPowderSnowCheck = getBoolean("lithium.entity.fast-powder-snow-check", lithiumEntityFastPowderSnowCheck) && lithiumEnable;
         lithiumAIRaid = getBoolean("lithium.ai.raid", lithiumAIRaid) && lithiumEnable;
         lithiumBlockMovingBlockShapes = getBoolean("lithium.block.moving-block-shapes", lithiumBlockMovingBlockShapes) && lithiumEnable;
+        lithiumGenChunkRegion = getBoolean("lithium.gen.chunk-region", lithiumGenChunkRegion) && lithiumEnable;
     }
 
     private void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index acd7468ee3c86d3456e96e4ec3d7e6a4c612e89d..4f0d04a46075b9af446c101c57d45e7e26d5ef4d 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -83,6 +83,12 @@ public class WorldGenRegion implements WorldGenLevel {
     private Supplier<String> currentlyGenerating;
     private final AtomicLong subTickCount = new AtomicLong();
     private static final ResourceLocation WORLDGEN_REGION_RANDOM = new ResourceLocation("worldgen_region_random");
+    // Fusion start - Lithium: Gen ChunkRegion
+    // Array view of the chunks in the region to avoid an unnecessary de-reference
+    private ChunkAccess[] chunksArr;
+    // The starting position of this region
+    private int minChunkX, minChunkZ;
+    // Fusion end
 
     public WorldGenRegion(ServerLevel world, List<ChunkAccess> chunks, ChunkStatus status, int placementRadius) {
         this.generatingStatus = status;
@@ -105,6 +111,12 @@ public class WorldGenRegion implements WorldGenLevel {
             this.lastPos = ((ChunkAccess) chunks.get(chunks.size() - 1)).getPos();
             this.structureManager = world.structureManager().forWorldGenRegion(this);
         }
+        // Fusion start - Lithium: Gen ChunkRegion
+        this.minChunkX = this.firstPos.x;
+        this.minChunkZ = this.firstPos.z;
+
+        this.chunksArr = chunks.toArray(new ChunkAccess[0]);
+        // Fusion end
     }
 
     public boolean isOldChunkAround(ChunkPos chunkPos, int checkRadius) {
@@ -120,10 +132,36 @@ public class WorldGenRegion implements WorldGenLevel {
         this.currentlyGenerating = structureName;
     }
 
+    // Fusion start - Lithium: Gen ChunkRegion
+    /**
+     * Use our chunk fetch function
+     */
+    public ChunkAccess getChunk(BlockPos pos) {
+        // Skip checking chunk.getStatus().isAtLeast(ChunkStatus.EMPTY) here, because it is always true
+        return this.getChunk(me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getX()), me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getZ()));
+    }
+
+    /**
+     * @reason Use the chunk array for faster access
+     * @author SuperCoder7979, 2No2Name
+     */
     @Override
     public ChunkAccess getChunk(int chunkX, int chunkZ) {
-        return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+        if (this.level.fusionConfig.lithiumGenChunkRegion) {
+            int x = chunkX - this.minChunkX;
+            int z = chunkZ - this.minChunkZ;
+            int w = this.size;
+
+            if (x >= 0 && z >= 0 && x < w && z < w) {
+                return this.chunksArr[x + z * w];
+            } else {
+                throw new NullPointerException("No chunk exists at " + new ChunkPos(chunkX, chunkZ));
+            }
+        } else {
+            return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+        }
     }
+    // Fusion end
 
     @Nullable
     @Override
@@ -180,10 +218,28 @@ public class WorldGenRegion implements WorldGenLevel {
     }
     // Paper end
 
+    // Fusion start - Lithium: Gen ChunkRegion
+    /**
+     * @reason Avoid pointer de-referencing, make method easier to inline
+     * @author JellySquid
+     */
     @Override
     public BlockState getBlockState(BlockPos pos) {
-        return this.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ())).getBlockState(pos);
+        if (this.level.fusionConfig.lithiumGenChunkRegion) {
+            int x = (me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getX())) - this.minChunkX;
+            int z = (me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getZ())) - this.minChunkZ;
+            int w = this.size;
+
+            if (x >= 0 && z >= 0 && x < w && z < w) {
+                return this.chunksArr[x + z * w].getBlockState(pos);
+            } else {
+                throw new NullPointerException("No chunk exists at " + new ChunkPos(pos));
+            }
+        } else {
+            return this.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ())).getBlockState(pos);
+        }
     }
+    // Fusion end
 
     @Override
     public FluidState getFluidState(BlockPos pos) {
