From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Mon, 9 Jan 2023 13:35:55 +0900
Subject: [PATCH] Lithium-AI-NearbyEntityTracking


diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index 887056a9e1c6260520e74ababf3f1bd59f9349f7..ad6c7fff6c905be7b3d8afd69edd172fd5d95cd1 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -232,6 +232,7 @@ public class FusionConfig {
     public static boolean lithiumWorldTickScheduler = true;
     public static boolean lithiumCollectionsBrain = true;
     public static boolean lithiumAITaskMemoryChangeCounting = true;
+    public static boolean lithiumAINearbyEntityTracking = false;
 
     private static void lithiumConfig() {
         lithiumMathFastUtil = getBoolean("lithium.math.fast-util", lithiumMathFastUtil) && lithiumEnable;
@@ -247,6 +248,7 @@ public class FusionConfig {
         lithiumWorldTickScheduler = getBoolean("lithium.world.tick-scheduler", lithiumWorldTickScheduler) && lithiumEnable;
         lithiumCollectionsBrain = getBoolean("lithium.collections.brain", lithiumCollectionsBrain) && lithiumEnable;
         lithiumAITaskMemoryChangeCounting = getBoolean("lithium.ai.task.memory-change-counting", lithiumAITaskMemoryChangeCounting) && lithiumEnable;
+        lithiumAINearbyEntityTracking = getBoolean("lithium.ai.nearby-entity-tracking.enable", lithiumAINearbyEntityTracking) && lithiumEnable;
     }
 
     private static void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index d276ed96cef961a5224d120c5f3b02da87801be0..4ca617ca373e211e10e29f49f6c5d7fed59f823e 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -163,6 +163,22 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return tag.contains("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
     }
 
+    // Fusion start - Lithium: AI NearbyEntityTracking
+    private me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerMulti nearbyEntityTracker = null;
+
+    @Nullable
+    public me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerMulti getListener() {
+        return this.nearbyEntityTracker;
+    }
+
+    public void addListener(me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener listener) {
+        if (this.nearbyEntityTracker == null) {
+            this.nearbyEntityTracker = new me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerMulti();
+        }
+        this.nearbyEntityTracker.addListener(listener);
+    }
+    // Fusion end
+
     // Paper start
     public static RandomSource SHARED_RANDOM = new RandomRandomSource();
     private static final class RandomRandomSource extends java.util.Random implements net.minecraft.world.level.levelgen.BitRandomSource {
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySection.java b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
index cc07585885496b83cae274238dec2b0534ee46bd..768918d80017916036a87153fc7590284b7ac3a4 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySection.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
@@ -14,6 +14,7 @@ public class EntitySection<T extends EntityAccess> {
     private final ClassInstanceMultiMap<T> storage;
     private Visibility chunkStatus;
     private long pos; // Fusion - Lithium: Util EntitySectionPosition
+    private final it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener> nearbyEntityListeners = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<>(0); // Fusion - Lithium: AI NearbyEntityTracking
 
     public EntitySection(Class<T> entityClass, Visibility status) {
         this.chunkStatus = status;
@@ -30,11 +31,49 @@ public class EntitySection<T extends EntityAccess> {
     }
     // Fusion end
 
+    // Fusion start - Lithium: AI NearbyEntityTracking
+    public void addListener(me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener listener) {
+        this.nearbyEntityListeners.add(listener);
+        if (this.chunkStatus.isTicking()) {
+            listener.onSectionEnteredRange(this, this.storage);
+        }
+    }
+
+    public void removeListener(EntitySectionStorage<?> sectionedEntityCache, me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener listener) {
+        boolean removed = this.nearbyEntityListeners.remove(listener);
+        if (this.chunkStatus.isTicking() && removed) {
+            listener.onSectionLeftRange(this, this.storage);
+        }
+        if (this.isEmpty()) {
+            sectionedEntityCache.remove(this.getPos());
+        }
+    }
+    // Fusion end
+
     public void add(T entity) {
         this.storage.add(entity);
+        // Fusion start - Lithium: AI NearbyEntityTracking
+        if (com.github.ipecter.fusion.FusionConfig.lithiumAINearbyEntityTracking) {
+            if (!this.chunkStatus.isTicking() || this.nearbyEntityListeners.isEmpty()) {
+                return;
+            }
+            if (entity instanceof net.minecraft.world.entity.Entity entity1) {
+                for (me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                    nearbyEntityListener.onEntityEnteredRange(entity1);
+                }
+            }
+        }
+        // Fusion end
     }
 
     public boolean remove(T entity) {
+        // Fusion start - Lithium: AI NearbyEntityTracking
+        if (com.github.ipecter.fusion.FusionConfig.lithiumAINearbyEntityTracking && (this.chunkStatus.isTicking() && !this.nearbyEntityListeners.isEmpty() && entity instanceof net.minecraft.world.entity.Entity entity1)) {
+            for (me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                nearbyEntityListener.onEntityLeftRange(entity1);
+            }
+        }
+        // Fusion end
         return this.storage.remove(entity);
     }
 
@@ -65,6 +104,11 @@ public class EntitySection<T extends EntityAccess> {
     }
 
     public boolean isEmpty() {
+        // Fusion start - Lithium: AI NearbyEntityTracking
+        if (com.github.ipecter.fusion.FusionConfig.lithiumAINearbyEntityTracking && !this.nearbyEntityListeners.isEmpty()) {
+            return false;
+        }
+        // Fusion end
         return this.storage.isEmpty();
     }
 
@@ -77,6 +121,23 @@ public class EntitySection<T extends EntityAccess> {
     }
 
     public Visibility updateChunkStatus(Visibility status) {
+        // Fusion start - Lithium: AI NearbyEntityTracking
+        if (com.github.ipecter.fusion.FusionConfig.lithiumAINearbyEntityTracking && this.chunkStatus.isTicking() != status.isTicking()) {
+            if (!status.isTicking()) {
+                if (!this.nearbyEntityListeners.isEmpty()) {
+                    for (me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                        nearbyEntityListener.onSectionLeftRange(this, this.storage);
+                    }
+                }
+            } else {
+                if (!this.nearbyEntityListeners.isEmpty()) {
+                    for (me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                        nearbyEntityListener.onSectionEnteredRange(this, this.storage);
+                    }
+                }
+            }
+        }
+        // Fusion end
         Visibility visibility = this.chunkStatus;
         this.chunkStatus = status;
         return visibility;
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index a77985b2dd7137d8eea03909403fc08e89376d73..3f95e85be61b12f9ebb3806add39893b517637b5 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -59,6 +59,12 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         this.entityGetter = new LevelEntityGetterAdapter<>(this.visibleEntityStorage, this.sectionStorage);
     }
 
+    // Fusion start - Lithium: AI NearbyEntityTracking
+    public EntitySectionStorage<T> getCache() {
+        return this.sectionStorage;
+    }
+    // Fusion end
+
     // CraftBukkit start - add method to get all entities in chunk
     public List<Entity> getEntities(ChunkPos chunkCoordIntPair) {
         return this.sectionStorage.getExistingSectionsInChunk(chunkCoordIntPair.toLong()).flatMap(EntitySection::getEntities).map(entity -> (Entity) entity).collect(Collectors.toList());
@@ -112,6 +118,16 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
             entitysection.add(entity);
             entity.setLevelCallback(new PersistentEntitySectionManager.Callback(entity, i, entitysection));
+            // Fusion start - Lithium: AI NearbyEntityTracking
+            me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerMulti listener = ((me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerProvider) entity).getListener();
+            if (listener != null) {
+                listener.forEachChunkInRangeChange(
+                        this.sectionStorage,
+                        null,
+                        SectionPos.of(entity.blockPosition())
+                );
+            }
+            // Fusion end
             if (!existing) {
                 this.callbacks.onCreated(entity);
             }
@@ -471,6 +487,18 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.getOrCreateSection(i);
 
                 entitysection.add(this.entity);
+                // Fusion start - Lithium: AI NearbyEntityTracking
+                me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerMulti listener = ((Entity) this.entity).getListener();
+                if (listener != null)
+                {
+                    //noinspection unchecked
+                    listener.forEachChunkInRangeChange(
+                            PersistentEntitySectionManager.this.getCache(),
+                            SectionPos.of(this.currentSectionKey),
+                            SectionPos.of(i)
+                    );
+                }
+                // Fusion end
                 this.currentSection = entitysection;
                 this.currentSectionKey = i;
                 this.updateStatus(visibility, entitysection.getStatus());
@@ -516,6 +544,17 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         @Override
         public void onRemove(Entity.RemovalReason reason) {
             org.spigotmc.AsyncCatcher.catchOp("Entity remove"); // Paper
+            // Fusion start - Lithium: AI NearbyEntityTracking
+            me.jellysquid.mods.lithium.common.entity.nearby_tracker.NearbyEntityListenerMulti listener = ((Entity) this.entity).getListener();
+            if (listener != null) {
+                //noinspection unchecked
+                listener.forEachChunkInRangeChange(
+                        PersistentEntitySectionManager.this.getCache(),
+                        SectionPos.of(this.currentSectionKey),
+                        null
+                );
+            }
+            // Fusion end
             if (!this.currentSection.remove(this.entity)) {
                 PersistentEntitySectionManager.LOGGER.warn("Entity {} wasn't found in section {} (destroying due to {})", new Object[]{this.entity, SectionPos.of(this.currentSectionKey), reason});
             }
