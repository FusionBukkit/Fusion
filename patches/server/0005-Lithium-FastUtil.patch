From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Tue, 4 Oct 2022 21:58:56 +0900
Subject: [PATCH] Lithium-FastUtil

Mirai - etil2jz - GPL 3.0
JettPack - Titaniumtown - GPL 3.0
Lithium - CaffeineMC  - GPL 3.0

diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index 6c27b22dd1d497687c0f4d3835e34149bcf952c1..ebfddc8dbd19e15c1565ff9b3851500ca0221837 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -41,7 +41,7 @@ public enum Direction implements StringRepresentable {
     private final Direction.Axis axis;
     private final Direction.AxisDirection axisDirection;
     private final Vec3i normal;
-    private static final Direction[] VALUES = values();
+    public static final Direction[] VALUES = values(); // Fusion - JettPack - Lithium: FastUtil
     private static final Direction[] BY_3D_DATA = Arrays.stream(VALUES).sorted(Comparator.comparingInt((direction) -> {
         return direction.data3d;
     })).toArray((i) -> {
@@ -458,7 +458,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public static Direction getRandom(RandomSource random) {
-        return Util.getRandom(VALUES, random);
+        return VALUES[random.nextInt(VALUES.length)]; // Fusion - JettPack - Lithium: FastUtil
     }
 
     public static Direction getNearest(double x, double y, double z) {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index cfb2e46b34b2982d6724f18214557fc80cf4adfa..8348a9e135bcfa19a6ebb13e329ea2ef055a0021 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -16,6 +16,15 @@ public class AABB {
     public final double maxY;
     public final double maxZ;
 
+    // Fusion start - JettPack - Lithium: FastUtil
+    static {
+        assert Direction.Axis.X.ordinal() == 0;
+        assert Direction.Axis.Y.ordinal() == 1;
+        assert Direction.Axis.Z.ordinal() == 2;
+        assert Direction.Axis.values().length == 3;
+    }
+    // Fusion end
+
     public AABB(double x1, double y1, double z1, double x2, double y2, double z2) {
         this.minX = Math.min(x1, x2);
         this.minY = Math.min(y1, y2);
@@ -81,11 +90,33 @@ public class AABB {
     }
 
     public double min(Direction.Axis axis) {
-        return axis.choose(this.minX, this.minY, this.minZ);
+        // Fusion start- JettPack - Lithium: FastUtil
+        switch (axis.ordinal()){
+            case 0: //X
+                return this.minX;
+            case 1: //Y
+                return this.minY;
+            case 2: //Z
+                return this.minZ;
+        }
+
+        throw  new IllegalArgumentException();
+        // Fusion end
     }
 
     public double max(Direction.Axis axis) {
-        return axis.choose(this.maxX, this.maxY, this.maxZ);
+        // Fusion start- JettPack - Lithium: FastUtil
+        switch (axis.ordinal()){
+            case 0: //X
+                return this.maxX;
+            case 1: //Y
+                return this.maxY;
+            case 2: //Z
+                return this.maxZ;
+        }
+
+        throw  new IllegalArgumentException();
+        // Fusion end
     }
 
     @Override
