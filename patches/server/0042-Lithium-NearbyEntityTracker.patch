From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Mon, 9 Jan 2023 11:54:15 +0900
Subject: [PATCH] Lithium-NearbyEntityTracker

Lithium - CaffeineMC  - GPL 3.0
JettPack - Titaniumtown - GPL 3.0

diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListener.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ffb1dddcec6b9d7fb8e03c18b835b3f4b9f386a
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListener.java
@@ -0,0 +1,90 @@
+package me.jellysquid.mods.lithium.common.entity.nearby_tracker;
+
+import me.jellysquid.mods.lithium.common.util.tuples.Range6Int;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.util.ClassInstanceMultiMap;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
+import net.minecraft.world.level.entity.EntityAccess;
+import net.minecraft.world.level.entity.EntitySection;
+import net.minecraft.world.level.entity.EntitySectionStorage;
+
+public interface NearbyEntityListener {
+    Range6Int EMPTY_RANGE = new Range6Int(0, 0, 0, -1, -1, -1);
+    /**
+     * Calls the callbacks for the chunk coordinates that this listener is leaving and entering
+     */
+    default void forEachChunkInRangeChange(EntitySectionStorage<? extends EntityAccess> entityCache, SectionPos prevCenterPos, SectionPos newCenterPos) {
+        Range6Int chunkRange = this.getChunkRange();
+        if (chunkRange == EMPTY_RANGE) {
+            return;
+        }
+        BlockPos.MutableBlockPos pos = new BlockPos.MutableBlockPos();
+
+        BoundingBox after = newCenterPos == null ? null : new BoundingBox(newCenterPos.getX() - chunkRange.negativeX(), newCenterPos.getY() - chunkRange.negativeY(), newCenterPos.getZ() - chunkRange.negativeZ(), newCenterPos.getX() + chunkRange.positiveX(), newCenterPos.getY() + chunkRange.positiveY(), newCenterPos.getZ() + chunkRange.positiveZ());
+        BoundingBox before = prevCenterPos == null ? null : new BoundingBox(prevCenterPos.getX() - chunkRange.negativeX(), prevCenterPos.getY() - chunkRange.negativeY(), prevCenterPos.getZ() - chunkRange.negativeZ(), prevCenterPos.getX() + chunkRange.positiveX(), prevCenterPos.getY() + chunkRange.positiveY(), prevCenterPos.getZ() + chunkRange.positiveZ());
+        if (before != null) {
+            for (int x = before.minX(); x <= before.maxX(); x++) {
+                for (int y = before.minY(); y <= before.maxY(); y++) {
+                    for (int z = before.minZ(); z <= before.maxZ(); z++) {
+                        if (after == null || !after.isInside(pos.set(x, y, z))) {
+                            long sectionPos = SectionPos.asLong(x, y, z);
+                            EntitySection<? extends EntityAccess> trackingSection = entityCache.getOrCreateSection(sectionPos);
+                            ((NearbyEntityListenerSection) trackingSection).removeListener(entityCache, this);
+                            if (trackingSection.isEmpty()) {
+                                entityCache.remove(sectionPos);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        if (after != null) {
+            for (int x = after.minX(); x <= after.maxX(); x++) {
+                for (int y = after.minY(); y <= after.maxY(); y++) {
+                    for (int z = after.minZ(); z <= after.maxZ(); z++) {
+                        if (before == null || !before.isInside(pos.set(x, y, z))) {
+                            ((NearbyEntityListenerSection) entityCache.getOrCreateSection(SectionPos.asLong(x, y, z))).addListener(this);
+                        }
+                    }
+                }
+            }
+        }
+    }
+    Range6Int getChunkRange();
+
+    /**
+     * Called by the entity tracker when an entity enters the range of this listener.
+     */
+    void onEntityEnteredRange(Entity entity);
+
+    /**
+     * Called by the entity tracker when an entity leaves the range of this listener or is removed from the world.
+     */
+    void onEntityLeftRange(Entity entity);
+
+    default Class<? extends Entity> getEntityClass() {
+        return Entity.class;
+    }
+
+    /**
+     * Method to add all entities in the iteration order of the chunk section. This order is relevant and necessary
+     * to keep vanilla parity.
+     * @param <T> the type of the Entities in the collection
+     * @param EntitySection the section the entities are in
+     * @param collection the collection of Entities that entered the range of this listener
+     */
+    default <T> void onSectionEnteredRange(Object EntitySection, ClassInstanceMultiMap<T> collection) {
+        for (Entity entity : collection.find(this.getEntityClass())) {
+            this.onEntityEnteredRange(entity);
+        }
+    }
+
+    default <T> void onSectionLeftRange(Object EntitySection, ClassInstanceMultiMap<T> collection) {
+        for (Entity entity : collection.find(this.getEntityClass())) {
+            this.onEntityLeftRange(entity);
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerMulti.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerMulti.java
new file mode 100644
index 0000000000000000000000000000000000000000..1cafba2463b7efea8ee40405549dc0b96fd9d199
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerMulti.java
@@ -0,0 +1,84 @@
+package me.jellysquid.mods.lithium.common.entity.nearby_tracker;
+
+import me.jellysquid.mods.lithium.common.util.tuples.Range6Int;
+import net.minecraft.world.entity.Entity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Allows for multiple listeners on an entity to be grouped under one logical listener. No guarantees are made about the
+ * order of which each sub-listener will be notified.
+ */
+public class NearbyEntityListenerMulti implements NearbyEntityListener {
+    private final List<NearbyEntityListener> listeners = new ArrayList<>(4);
+    private Range6Int range = null;
+
+    public void addListener(NearbyEntityListener listener) {
+        if (this.range != null) {
+            throw new IllegalStateException("Cannot add sublisteners after listening range was set!");
+        }
+        this.listeners.add(listener);
+    }
+
+    public void removeListener(NearbyEntityListener listener) {
+        this.listeners.remove(listener);
+    }
+
+    @Override
+    public Range6Int getChunkRange() {
+        if (this.range != null) {
+            return this.range;
+        }
+        return this.calculateRange();
+    }
+    private Range6Int calculateRange() {
+        if (this.listeners.isEmpty()) {
+            return this.range = EMPTY_RANGE;
+        }
+        int positiveX = -1;
+        int positiveY = -1;
+        int positiveZ = -1;
+        int negativeX = 0;
+        int negativeY = 0;
+        int negativeZ = 0;
+
+        for (NearbyEntityListener listener : this.listeners) {
+            Range6Int chunkRange = listener.getChunkRange();
+            positiveX = Math.max(chunkRange.positiveX(), positiveX);
+            positiveY = Math.max(chunkRange.positiveY(), positiveY);
+            positiveZ = Math.max(chunkRange.positiveZ(), positiveZ);
+            negativeX = Math.max(chunkRange.negativeX(), negativeX);
+            negativeY = Math.max(chunkRange.negativeY(), negativeY);
+            negativeZ = Math.max(chunkRange.negativeZ(), negativeZ);
+
+        }
+        return this.range = new Range6Int(positiveX, positiveY, positiveZ, negativeX, negativeY, negativeZ);
+    }
+
+    @Override
+    public void onEntityEnteredRange(Entity entity) {
+        for (NearbyEntityListener listener : this.listeners) {
+            listener.onEntityEnteredRange(entity);
+        }
+    }
+
+    @Override
+    public void onEntityLeftRange(Entity entity) {
+        for (NearbyEntityListener listener : this.listeners) {
+            listener.onEntityLeftRange(entity);
+        }
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sublisteners = new StringBuilder();
+        String comma = "";
+        for (NearbyEntityListener listener : this.listeners) {
+            sublisteners.append(comma).append(listener.toString());
+            comma = ","; //trick to drop the first comma
+        }
+
+        return super.toString() + " with sublisteners: [" + sublisteners + "]";
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerProvider.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..3ec322acc9e6cb73b3a3295235a6cd0e2eb543da
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerProvider.java
@@ -0,0 +1,10 @@
+package me.jellysquid.mods.lithium.common.entity.nearby_tracker;
+
+import org.jetbrains.annotations.Nullable;
+
+public interface NearbyEntityListenerProvider {
+    @Nullable
+    NearbyEntityListenerMulti getListener();
+
+    void addListener(NearbyEntityListener listener);
+}
\ No newline at end of file
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerSection.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerSection.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab31af4d60cda08d8c2605029f87b2ad64e1a742
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityListenerSection.java
@@ -0,0 +1,9 @@
+package me.jellysquid.mods.lithium.common.entity.nearby_tracker;
+
+import net.minecraft.world.level.entity.EntitySectionStorage;
+
+public interface NearbyEntityListenerSection {
+    void addListener(NearbyEntityListener listener);
+
+    void removeListener(EntitySectionStorage<?> sectionedEntityCache, NearbyEntityListener listener);
+}
\ No newline at end of file
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityTracker.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityTracker.java
new file mode 100644
index 0000000000000000000000000000000000000000..b23c825b316243516f7618f83e2deeef018073dd
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/nearby_tracker/NearbyEntityTracker.java
@@ -0,0 +1,141 @@
+package me.jellysquid.mods.lithium.common.entity.nearby_tracker;
+
+import it.unimi.dsi.fastutil.objects.Reference2LongOpenHashMap;
+import me.jellysquid.mods.lithium.common.util.tuples.Range6Int;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.core.SectionPos;
+import net.minecraft.core.Vec3i;
+
+import java.util.List;
+
+/**
+ * Maintains a collection of all entities within the range of this listener. This allows AI goals to quickly
+ * assess nearby entities which match the provided class.
+ */
+public class NearbyEntityTracker<T extends LivingEntity> implements NearbyEntityListener {
+    private final Class<T> clazz;
+    private final LivingEntity self;
+
+    private final Reference2LongOpenHashMap<T> nearbyEntities = new Reference2LongOpenHashMap<>(0);
+    private long counter;
+    private final Range6Int chunkAABBRadius;
+
+    public NearbyEntityTracker(Class<T> clazz, LivingEntity self, Vec3i AABBRadius) {
+        this.clazz = clazz;
+        this.self = self;
+        this.chunkAABBRadius = new Range6Int(
+                1 + SectionPos.blockToSectionCoord(AABBRadius.getX()),
+                1 + SectionPos.blockToSectionCoord(AABBRadius.getY()),
+                1 + SectionPos.blockToSectionCoord(AABBRadius.getZ()),
+                1 + SectionPos.blockToSectionCoord(AABBRadius.getX()),
+                1 + SectionPos.blockToSectionCoord(AABBRadius.getY()),
+                1 + SectionPos.blockToSectionCoord(AABBRadius.getZ())
+        );
+    }
+
+    @Override
+    public Class<? extends Entity> getEntityClass() {
+        return this.clazz;
+    }
+
+    @Override
+    public Range6Int getChunkRange() {
+        return this.chunkAABBRadius;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void onEntityEnteredRange(Entity entity) {
+        if (!this.clazz.isInstance(entity)) {
+            return;
+        }
+
+        this.nearbyEntities.put((T) entity, this.counter++);
+    }
+
+    @Override
+    public void onEntityLeftRange(Entity entity) {
+        if (this.nearbyEntities.isEmpty() || !this.clazz.isInstance(entity)) {
+            return;
+        }
+
+        this.nearbyEntities.removeLong(entity);
+    }
+
+    /**
+     * Gets the closest T (extends LivingEntity) to the center of this tracker that also intersects with the given AABB and meets the
+     * requirements of the targetPredicate.
+     * The result may be different from vanilla if there are multiple closest entities.
+     *
+     * @param AABB             the AABB the entities have to intersect
+     * @param targetPredicate predicate the entity has to meet
+     * @param x
+     * @param y
+     * @param z
+     * @return the closest Entity that meets all requirements (distance, AABB intersection, predicate, type T)
+     */
+    public T getClosestEntity(AABB AABB, TargetingConditions targetPredicate, double x, double y, double z) {
+        T nearest = null;
+        double nearestDistance = Double.POSITIVE_INFINITY;
+
+        for (T entity : this.nearbyEntities.keySet()) {
+            double distance;
+            if (
+                    (AABB == null || AABB.intersects(entity.getBoundingBox())) &&
+                            (distance = entity.distanceToSqr(x, y, z)) <= nearestDistance &&
+                            targetPredicate.test(this.self, entity)
+            ) {
+                if (distance == nearestDistance) {
+                    nearest = this.getFirst(nearest, entity);
+                } else {
+                    nearest = entity;
+                }
+                nearestDistance = distance;
+            }
+        }
+
+        return nearest;
+    }
+
+    /**
+     * Gets the Entity that is processed first in vanilla.
+     * @param entity1 one Entity
+     * @param entity2 the other Entity
+     * @return the Entity that is first in vanilla
+     */
+    private T getFirst(T entity1, T entity2) {
+        if (this.getEntityClass() == Player.class) {
+            //Get first in player list
+            List<? extends Player> players = this.self.getLevel().players();
+            return players.indexOf((Player)entity1) < players.indexOf((Player)entity2) ? entity1 : entity2;
+        } else {
+            //Get first sorted by chunk section pos as long, then sorted by first added to the chunk section
+            //First added to this tracker and first added to the chunk section is equivalent here, because
+            //this tracker always tracks complete sections and the entities are added in order
+            long pos1 = SectionPos.asLong(entity1.blockPosition());
+            long pos2 = SectionPos.asLong(entity2.blockPosition());
+            if (pos1 < pos2) {
+                return entity1;
+            } else if (pos2 < pos1) {
+                return entity2;
+            } else {
+                if (this.nearbyEntities.getLong(entity1) < this.nearbyEntities.getLong(entity2)) {
+                    return entity1;
+                } else {
+                    return entity2;
+                }
+            }
+        }
+
+    }
+
+    @Override
+    public String toString() {
+        return super.toString() + " for entity class: " + this.clazz.getName() + ", around entity: " + this.self.toString() + " with NBT: " + this.self.saveWithoutId(new CompoundTag());
+    }
+}
\ No newline at end of file
