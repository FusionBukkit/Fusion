From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 28 Dec 2022 15:37:06 +0900
Subject: [PATCH] Lithium-Collections-EntityFiltering

Lithium - CaffeineMC  - GPL 3.0
JettPack - Titaniumtown - GPL 3.0
Mirai - etil2jz - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index 5a00ac85193707784f327771b3995745e1aecc70..a3dbb786854deac2df6367c3be68480e5f11c5c5 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -227,6 +227,7 @@ public class FusionConfig {
     public static boolean lithiumShapesPrecomputeShapeArrays = true;
     public static boolean lithiumCollectionsAttributes = true;
     public static boolean lithiumCollectionsEntityByType = true;
+    public static boolean lithiumCollectionsEntityFiltering = true;
 
     private static void lithiumConfig() {
         lithiumMathFastUtil = getBoolean("lithium.math.fast-util", lithiumMathFastUtil) && lithiumEnable;
@@ -237,6 +238,7 @@ public class FusionConfig {
         lithiumShapesPrecomputeShapeArrays = getBoolean("lithium.shapes.precompute-shape-arrays", lithiumShapesPrecomputeShapeArrays) && lithiumEnable;
         lithiumCollectionsAttributes = getBoolean("lithium.collections.attributes", lithiumCollectionsAttributes) && lithiumEnable;
         lithiumCollectionsEntityByType = getBoolean("lithium.collections.entity-by-type", lithiumCollectionsEntityByType) && lithiumEnable;
+        lithiumCollectionsEntityFiltering = getBoolean("lithium.collections.entity-filtering", lithiumCollectionsEntityFiltering) && lithiumEnable;
     }
 
     private static void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index 194c1a04f32963e6de81a2e873a6091c0cf52214..547b8517fa6fdeb01d9574d25c6d155d8ce565c6 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -55,17 +55,46 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
         return this.find(object.getClass()).contains(object);
     }
 
+    // Fusion start - Lithium: Collections EntityFiltering
+    /**
+     * @reason Only perform the slow Class#isAssignableFrom(Class) if a list doesn't exist for the type, otherwise
+     * we can assume it's already valid. The slow-path code is moved to a separate method to help the JVM inline this.
+     * @author JellySquid
+     */
     public <S> Collection<S> find(Class<S> type) {
-        if (!this.baseClass.isAssignableFrom(type)) {
-            throw new IllegalArgumentException("Don't know how to search for " + type);
+        if (com.github.ipecter.fusion.FusionConfig.lithiumCollectionsEntityFiltering) {
+            Collection<T> collection = this.byClass.get(type);
+            if (collection == null) {
+                collection = this.createAllOfType(type);
+            }
+            return (Collection<S>) Collections.unmodifiableCollection(collection);
         } else {
-            List<? extends T> list = this.byClass.computeIfAbsent(type, (typeClass) -> {
-                return this.allInstances.stream().filter(typeClass::isInstance).collect(Collectors.toList());
-            });
-            return Collections.unmodifiableCollection(list);
+            if (!this.baseClass.isAssignableFrom(type)) {
+                throw new IllegalArgumentException("Don't know how to search for " + type);
+            } else {
+                List<? extends T> list = this.byClass.computeIfAbsent(type, (typeClass) -> {
+                    return this.allInstances.stream().filter(typeClass::isInstance).collect(Collectors.toList());
+                });
+                return (Collection<S>) Collections.unmodifiableCollection(list);
+            }
         }
     }
 
+    private <S> Collection<T> createAllOfType(Class<S> type) {
+        List<T> list = new java.util.ArrayList<>();
+
+        for (T allElement : this.allInstances) {
+            if (type.isInstance(allElement)) {
+                list.add(allElement);
+            }
+        }
+
+        this.byClass.put(type, list);
+
+        return list;
+    }
+    // Fusion end
+
     @Override
     public Iterator<T> iterator() {
         return (Iterator<T>)(this.allInstances.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.allInstances.iterator()));
