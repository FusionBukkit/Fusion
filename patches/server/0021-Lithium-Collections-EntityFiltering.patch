From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Tue, 1 Nov 2022 13:17:45 +0900
Subject: [PATCH] Lithium-Collections-EntityFiltering

JettPack - Titaniumtown - GPL 3.0
Lithium - CaffeineMC  - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index e4d2490167d31897318093153e0a721ebe1fd7b8..b1f52f6bdb0a93c0797d1296a029e7f12b2f8e49 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -204,6 +204,7 @@ public class FusionConfig {
     public static boolean lithiumCollectionsPrecomputeShapeArrays = true;
     public static boolean lithiumCollectionsEntityAttributes = true;
     public static boolean lithiumCollectionsEntityByType = true;
+    public static boolean lithiumCollectionsEntityFiltering = true;

     private static void lithiumConfig() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
@@ -216,5 +217,6 @@ public class FusionConfig {
         lithiumCollectionsPrecomputeShapeArrays = getBoolean("lithium.collections.precompute-shape-arrays", lithiumCollectionsPrecomputeShapeArrays) && lithiumEnable;
         lithiumCollectionsEntityAttributes = getBoolean("lithium.collections.entity-attributes", lithiumCollectionsEntityAttributes) && lithiumEnable;
         lithiumCollectionsEntityByType = getBoolean("lithium.collections.entity-by-type", lithiumCollectionsEntityByType) && lithiumEnable;
+        lithiumCollectionsEntityFiltering = getBoolean("lithium.collections.entity-filtering", lithiumCollectionsEntityFiltering) && lithiumEnable;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index e5a22ec2cd52a68d1fcefeaad97763d570ebd886..924e77139d2a6a2746d834c16af480cd9b42189b 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -56,15 +56,41 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
     }

     public <S> Collection<S> find(Class<S> type) {
-        if (!this.baseClass.isAssignableFrom(type)) {
-            throw new IllegalArgumentException("Don't know how to search for " + type);
+        // Fusion start - Lithium: Collections Entity Filtering
+        if (com.github.ipecter.fusion.FusionConfig.lithiumCollectionsEntityFiltering) {
+            Collection<T> collection = this.byClass.get(type);
+            if (collection == null) {
+                collection = this.createAllOfType(type);
+            }
+            return (Collection<S>) Collections.unmodifiableCollection(collection);
         } else {
-            List<? extends T> list = this.byClass.computeIfAbsent(type, (typeClass) -> {
-                return this.allInstances.stream().filter(typeClass::isInstance).collect(Collectors.toList());
-            });
-            return Collections.unmodifiableCollection(list);
+            if (!this.baseClass.isAssignableFrom(type)) {
+                throw new IllegalArgumentException("Don't know how to search for " + type);
+            } else {
+                List list = this.byClass.computeIfAbsent(type, (typeClass) -> { // Fusion - JettPack: Decomp Fix
+                    return this.allInstances.stream().filter(typeClass::isInstance).collect(Collectors.toList());
+                });
+                return Collections.unmodifiableCollection(list);
+            }
         }
+        // Fusion end
+    }
+
+    // Fusion start - Lithium: Collections Entity Filtering
+    private <S> Collection<T> createAllOfType(Class<S> type) {
+        List<T> list = new java.util.ArrayList<>();
+
+        for (T allElement : this.allInstances) {
+            if (type.isInstance(allElement)) {
+                list.add(allElement);
+            }
+        }
+
+        this.byClass.put(type, list);
+
+        return list;
     }
+    // Fusion end
 
     @Override
     public Iterator<T> iterator() {
