From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Tue, 10 Jan 2023 09:59:39 +0900
Subject: [PATCH] C2ME-Opts-Math


diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index 152af075e76245f5fd452b5beac3c727ea2ee72c..6c770071b915ba605248ed551b2cacfd4e11d502 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -257,10 +257,12 @@ public class FusionConfig {
     }
 
     public static boolean c2meEnable = true;
+    public static boolean c2meOptsMath = true;
 
     private static void c2meConfig() {
         setComment("c2me", "[ C2ME ] Chunk Performance Improve Mod");
         c2meEnable = getBoolean("c2me.enable", c2meEnable);
+        c2meOptsMath = getBoolean("c2me.opts.math", c2meOptsMath) && c2meEnable;
     }
 
     private static void c2meConfigSetup() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
index fb84d703b4461343d50510d7c9be32fc1f09ed22..f8fb083e21effeed4bdb494343f08196480750e8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
@@ -11,6 +11,27 @@ public final class ImprovedNoise {
     public final double yo;
     public final double zo;
 
+    // Fusion start - C2ME: Opts Math
+    private static final double[] FLAT_SIMPLEX_GRAD = new double[]{
+            1, 1, 0, 0,
+            -1, 1, 0, 0,
+            1, -1, 0, 0,
+            -1, -1, 0, 0,
+            1, 0, 1, 0,
+            -1, 0, 1, 0,
+            1, 0, -1, 0,
+            -1, 0, -1, 0,
+            0, 1, 1, 0,
+            0, -1, 1, 0,
+            0, 1, -1, 0,
+            0, -1, -1, 0,
+            1, 1, 0, 0,
+            0, -1, 1, 0,
+            -1, 1, 0, 0,
+            0, -1, -1, 0,
+    };
+    // Fusion end
+
     public ImprovedNoise(RandomSource random) {
         this.xo = random.nextDouble() * 256.0D;
         this.yo = random.nextDouble() * 256.0D;
@@ -34,34 +55,65 @@ public final class ImprovedNoise {
         return this.noise(x, y, z, 0.0D, 0.0D);
     }
 
+    // Fusion start - C2ME: Opts Math
+    /**
+     * @author ishland
+     * @reason optimize: remove frequent type conversions
+     */
     /** @deprecated */
     @Deprecated
     public double noise(double x, double y, double z, double yScale, double yMax) {
-        double d = x + this.xo;
-        double e = y + this.yo;
-        double f = z + this.zo;
-        int i = Mth.floor(d);
-        int j = Mth.floor(e);
-        int k = Mth.floor(f);
-        double g = d - (double)i;
-        double h = e - (double)j;
-        double l = f - (double)k;
-        double o;
-        if (yScale != 0.0D) {
-            double m;
-            if (yMax >= 0.0D && yMax < h) {
-                m = yMax;
-            } else {
-                m = h;
+        if (com.github.ipecter.fusion.FusionConfig.c2meOptsMath) {
+            double d = x + this.xo;
+            double e = y + this.yo;
+            double f = z + this.zo;
+            double i = Mth.floor(d);
+            double j = Mth.floor(e);
+            double k = Mth.floor(f);
+            double g = d - i;
+            double h = e - j;
+            double l = f - k;
+            double o = 0.0D;
+            if (yScale != 0.0) {
+                double m;
+                if (yMax >= 0.0 && yMax < h) {
+                    m = yMax;
+                } else {
+                    m = h;
+                }
+
+                o = Mth.floor(m / yScale + 1.0E-7F) * yScale;
             }
 
-            o = (double)Mth.floor(m / yScale + (double)1.0E-7F) * yScale;
+            return this.sampleAndLerp((int) i, (int) j, (int) k, g, h - o, l, h);
         } else {
-            o = 0.0D;
-        }
+            double d = x + this.xo;
+            double e = y + this.yo;
+            double f = z + this.zo;
+            int i = Mth.floor(d);
+            int j = Mth.floor(e);
+            int k = Mth.floor(f);
+            double g = d - (double) i;
+            double h = e - (double) j;
+            double l = f - (double) k;
+            double o;
+            if (yScale != 0.0D) {
+                double m;
+                if (yMax >= 0.0D && yMax < h) {
+                    m = yMax;
+                } else {
+                    m = h;
+                }
 
-        return this.sampleAndLerp(i, j, k, g, h - o, l, h);
+                o = (double) Mth.floor(m / yScale + (double) 1.0E-7F) * yScale;
+            } else {
+                o = 0.0D;
+            }
+
+            return this.sampleAndLerp(i, j, k, g, h - o, l, h);
+        }
     }
+    // Fusion end
 
     public double noiseWithDerivative(double x, double y, double z, double[] ds) {
         double d = x + this.xo;
@@ -84,26 +136,97 @@ public final class ImprovedNoise {
         return this.p[input & 255] & 255;
     }
 
+    // Fusion start - C2ME: Opts Math
+    /**
+     * @author ishland
+     * @reason inline math & small optimization: remove frequent type conversions and redundant ops
+     */
     private double sampleAndLerp(int sectionX, int sectionY, int sectionZ, double localX, double localY, double localZ, double fadeLocalY) {
-        int i = this.p(sectionX);
-        int j = this.p(sectionX + 1);
-        int k = this.p(i + sectionY);
-        int l = this.p(i + sectionY + 1);
-        int m = this.p(j + sectionY);
-        int n = this.p(j + sectionY + 1);
-        double d = gradDot(this.p(k + sectionZ), localX, localY, localZ);
-        double e = gradDot(this.p(m + sectionZ), localX - 1.0D, localY, localZ);
-        double f = gradDot(this.p(l + sectionZ), localX, localY - 1.0D, localZ);
-        double g = gradDot(this.p(n + sectionZ), localX - 1.0D, localY - 1.0D, localZ);
-        double h = gradDot(this.p(k + sectionZ + 1), localX, localY, localZ - 1.0D);
-        double o = gradDot(this.p(m + sectionZ + 1), localX - 1.0D, localY, localZ - 1.0D);
-        double p = gradDot(this.p(l + sectionZ + 1), localX, localY - 1.0D, localZ - 1.0D);
-        double q = gradDot(this.p(n + sectionZ + 1), localX - 1.0D, localY - 1.0D, localZ - 1.0D);
-        double r = Mth.smoothstep(localX);
-        double s = Mth.smoothstep(fadeLocalY);
-        double t = Mth.smoothstep(localZ);
-        return Mth.lerp3(r, s, t, d, e, f, g, h, o, p, q);
+        if (com.github.ipecter.fusion.FusionConfig.c2meOptsMath) {
+            final int var0 = sectionX & 0xFF;
+            final int var1 = (sectionX + 1) & 0xFF;
+            final int var2 = this.p[var0] & 0xFF;
+            final int var3 = this.p[var1] & 0xFF;
+            final int var4 = (var2 + sectionY) & 0xFF;
+            final int var5 = (var3 + sectionY) & 0xFF;
+            final int var6 = (var2 + sectionY + 1) & 0xFF;
+            final int var7 = (var3 + sectionY + 1) & 0xFF;
+            final int var8 = this.p[var4] & 0xFF;
+            final int var9 = this.p[var5] & 0xFF;
+            final int var10 = this.p[var6] & 0xFF;
+            final int var11 = this.p[var7] & 0xFF;
+
+            final int var12 = (var8 + sectionZ) & 0xFF;
+            final int var13 = (var9 + sectionZ) & 0xFF;
+            final int var14 = (var10 + sectionZ) & 0xFF;
+            final int var15 = (var11 + sectionZ) & 0xFF;
+            final int var16 = (var8 + sectionZ + 1) & 0xFF;
+            final int var17 = (var9 + sectionZ + 1) & 0xFF;
+            final int var18 = (var10 + sectionZ + 1) & 0xFF;
+            final int var19 = (var11 + sectionZ + 1) & 0xFF;
+            final int var20 = (this.p[var12] & 15) << 2;
+            final int var21 = (this.p[var13] & 15) << 2;
+            final int var22 = (this.p[var14] & 15) << 2;
+            final int var23 = (this.p[var15] & 15) << 2;
+            final int var24 = (this.p[var16] & 15) << 2;
+            final int var25 = (this.p[var17] & 15) << 2;
+            final int var26 = (this.p[var18] & 15) << 2;
+            final int var27 = (this.p[var19] & 15) << 2;
+            final double var60 = localX - 1.0;
+            final double var61 = localY - 1.0;
+            final double var62 = localZ - 1.0;
+            final double var87 = FLAT_SIMPLEX_GRAD[(var20) | 0] * localX + FLAT_SIMPLEX_GRAD[(var20) | 1] * localY + FLAT_SIMPLEX_GRAD[(var20) | 2] * localZ;
+            final double var88 = FLAT_SIMPLEX_GRAD[(var21) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var21) | 1] * localY + FLAT_SIMPLEX_GRAD[(var21) | 2] * localZ;
+            final double var89 = FLAT_SIMPLEX_GRAD[(var22) | 0] * localX + FLAT_SIMPLEX_GRAD[(var22) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var22) | 2] * localZ;
+            final double var90 = FLAT_SIMPLEX_GRAD[(var23) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var23) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var23) | 2] * localZ;
+            final double var91 = FLAT_SIMPLEX_GRAD[(var24) | 0] * localX + FLAT_SIMPLEX_GRAD[(var24) | 1] * localY + FLAT_SIMPLEX_GRAD[(var24) | 2] * var62;
+            final double var92 = FLAT_SIMPLEX_GRAD[(var25) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var25) | 1] * localY + FLAT_SIMPLEX_GRAD[(var25) | 2] * var62;
+            final double var93 = FLAT_SIMPLEX_GRAD[(var26) | 0] * localX + FLAT_SIMPLEX_GRAD[(var26) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var26) | 2] * var62;
+            final double var94 = FLAT_SIMPLEX_GRAD[(var27) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var27) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var27) | 2] * var62;
+
+            final double var95 = localX * 6.0 - 15.0;
+            final double var96 = fadeLocalY * 6.0 - 15.0;
+            final double var97 = localZ * 6.0 - 15.0;
+            final double var98 = localX * var95 + 10.0;
+            final double var99 = fadeLocalY * var96 + 10.0;
+            final double var100 = localZ * var97 + 10.0;
+            final double var101 = localX * localX * localX * var98;
+            final double var102 = fadeLocalY * fadeLocalY * fadeLocalY * var99;
+            final double var103 = localZ * localZ * localZ * var100;
+
+            final double var113 = var87 + var101 * (var88 - var87);
+            final double var114 = var93 + var101 * (var94 - var93);
+            final double var115 = var91 + var101 * (var92 - var91);
+            final double var116 = var89 + var101 * (var90 - var89);
+            final double var117 = var114 - var115;
+            final double var118 = var102 * (var116 - var113);
+            final double var119 = var102 * var117;
+            final double var120 = var113 + var118;
+            final double var121 = var115 + var119;
+            return var120 + (var103 * (var121 - var120));
+
+        } else {
+            int i = this.p(sectionX);
+            int j = this.p(sectionX + 1);
+            int k = this.p(i + sectionY);
+            int l = this.p(i + sectionY + 1);
+            int m = this.p(j + sectionY);
+            int n = this.p(j + sectionY + 1);
+            double d = gradDot(this.p(k + sectionZ), localX, localY, localZ);
+            double e = gradDot(this.p(m + sectionZ), localX - 1.0D, localY, localZ);
+            double f = gradDot(this.p(l + sectionZ), localX, localY - 1.0D, localZ);
+            double g = gradDot(this.p(n + sectionZ), localX - 1.0D, localY - 1.0D, localZ);
+            double h = gradDot(this.p(k + sectionZ + 1), localX, localY, localZ - 1.0D);
+            double o = gradDot(this.p(m + sectionZ + 1), localX - 1.0D, localY, localZ - 1.0D);
+            double p = gradDot(this.p(l + sectionZ + 1), localX, localY - 1.0D, localZ - 1.0D);
+            double q = gradDot(this.p(n + sectionZ + 1), localX - 1.0D, localY - 1.0D, localZ - 1.0D);
+            double r = Mth.smoothstep(localX);
+            double s = Mth.smoothstep(fadeLocalY);
+            double t = Mth.smoothstep(localZ);
+            return Mth.lerp3(r, s, t, d, e, f, g, h, o, p, q);
+        }
     }
+    // Fusion end
 
     private double sampleWithDerivative(int sectionX, int sectionY, int sectionZ, double localX, double localY, double localZ, double[] ds) {
         int i = this.p(sectionX);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
index 03c752e4abfe9e1f27c79024af48b31f7e90e555..3c1e3b353377c31b8f28ddb3aa7fc6adcd3f2cdc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -26,6 +26,10 @@ public class PerlinNoise {
     private final double lowestFreqValueFactor;
     private final double lowestFreqInputFactor;
     private final double maxValue;
+    // Fusion start - C2ME: Opts Math
+    private int octaveSamplersCount;
+    private double[] amplitudesArray;
+    // Fusion end
 
     /** @deprecated */
     @Deprecated
@@ -131,6 +135,10 @@ public class PerlinNoise {
         this.lowestFreqInputFactor = Math.pow(2.0D, (double)(-j));
         this.lowestFreqValueFactor = Math.pow(2.0D, (double)(i - 1)) / (Math.pow(2.0D, (double)i) - 1.0D);
         this.maxValue = this.edgeValue(2.0D);
+        // Fusion start - C2ME: Opts Math
+        this.octaveSamplersCount = this.noiseLevels.length;
+        this.amplitudesArray = this.amplitudes.toDoubleArray();
+        // Fusion end
     }
 
     protected double maxValue() {
@@ -141,9 +149,36 @@ public class PerlinNoise {
         random.consumeCount(262);
     }
 
+    // Fusion start - C2ME: Opts Math
+    /**
+     * @author ishland
+     * @reason optimize for common cases
+     */
     public double getValue(double x, double y, double z) {
+        if (com.github.ipecter.fusion.FusionConfig.c2meOptsMath) {
+            double d = 0.0;
+            double e = this.lowestFreqInputFactor;
+            double f = this.lowestFreqValueFactor;
+
+            for(int i = 0; i < this.octaveSamplersCount; ++i) {
+                ImprovedNoise perlinNoiseSampler = this.noiseLevels[i];
+                if (perlinNoiseSampler != null) {
+                    @SuppressWarnings("deprecation")
+                    double g = perlinNoiseSampler.noise(
+                            wrap(x * e), wrap(y * e), wrap(z * e), 0.0, 0.0
+                    );
+                    d += this.amplitudesArray[i] * g * f;
+                }
+
+                e *= 2.0;
+                f /= 2.0;
+            }
+
+            return d;
+        }
         return this.getValue(x, y, z, 0.0D, 0.0D, false);
     }
+    // Fusion end
 
     /** @deprecated */
     @Deprecated
@@ -191,9 +226,18 @@ public class PerlinNoise {
         return this.noiseLevels[this.noiseLevels.length - 1 - octave];
     }
 
+    // Fusion start - C2ME: Opts Math
+    /**
+     * @author ishland
+     * @reason remove frequent type conversion
+     */
     public static double wrap(double value) {
+        if (com.github.ipecter.fusion.FusionConfig.c2meOptsMath) {
+            return value - Mth.floor(value / 3.3554432E7 + 0.5) * 3.3554432E7;
+        }
         return value - (double)Mth.lfloor(value / 3.3554432E7D + 0.5D) * 3.3554432E7D;
     }
+    // Fusion end
 
     protected int firstOctave() {
         return this.firstOctave;
