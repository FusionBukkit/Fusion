From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Fri, 6 Jan 2023 15:32:15 +0900
Subject: [PATCH] Lithium-Entity-Collisions-Suffocation


diff --git a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
index 0961183186cc1e947de60e62c7ee977bb9af82b8..e2cec470613d5f8558a281889859d9f03d403baf 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
@@ -140,6 +140,7 @@ public class FusionWorldConfig {
     public boolean lithiumBlockMovingBlockShapes = true;
     public boolean lithiumGenChunkRegion = true;
     public boolean lithiumAISensorSecondaryPoi = true;
+    public boolean lithiumEntityCollisionsSuffocation = true;
 
     private void lithiumConfig() {
         lithiumEnable = getBoolean("lithium.enable", lithiumEnable);
@@ -152,6 +153,7 @@ public class FusionWorldConfig {
         lithiumBlockMovingBlockShapes = getBoolean("lithium.block.moving-block-shapes", lithiumBlockMovingBlockShapes) && lithiumEnable;
         lithiumGenChunkRegion = getBoolean("lithium.gen.chunk-region", lithiumGenChunkRegion) && lithiumEnable;
         lithiumAISensorSecondaryPoi = getBoolean("lithium.ai.sensor.secondary-poi", lithiumAISensorSecondaryPoi) && lithiumEnable;
+        lithiumEntityCollisionsSuffocation = getBoolean("lithium.entity.collisions.suffocation", lithiumEntityCollisionsSuffocation) && lithiumEnable;
     }
 
     private void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1ae7ef3d94d4d3d8413a5419eeb9fadad89d2f8d..d276ed96cef961a5224d120c5f3b02da87801be0 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2615,6 +2615,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return !this.isRemoved();
     }
 
+    // Fusion start - Lithium: Entity Collisions Suffocation
+    /**
+     * @author 2No2Name
+     * @reason Avoid stream code, use optimized chunk section iteration order
+     */
     public boolean isInWall() {
         if (this.noPhysics) {
             return false;
@@ -2622,32 +2627,64 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             float f = this.dimensions.width * 0.8F;
             AABB axisalignedbb = AABB.ofSize(this.getEyePosition(), (double) f, 1.0E-6D, (double) f);
 
-            BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
             int minX = Mth.floor(axisalignedbb.minX);
             int minY = Mth.floor(axisalignedbb.minY);
             int minZ = Mth.floor(axisalignedbb.minZ);
             int maxX = Mth.floor(axisalignedbb.maxX);
             int maxY = Mth.floor(axisalignedbb.maxY);
             int maxZ = Mth.floor(axisalignedbb.maxZ);
-            for (int fz = minZ; fz <= maxZ; ++fz) {
-                for (int fx = minX; fx <= maxX; ++fx) {
-                    for (int fy = minY; fy <= maxY; ++fy) {
-                        net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk)this.level.getChunkIfLoadedImmediately(fx >> 4, fz >> 4);
-                        if (chunk == null) {
-                            continue;
+
+            BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
+            net.minecraft.world.phys.shapes.VoxelShape suffocationShape = null;
+
+            if (this.level.fusionConfig.lithiumEntityCollisionsSuffocation) {
+                //skip getting blocks when the entity is outside the world height
+                //also avoids infinite loop with entities below y = Integer.MIN_VALUE (some modded servers do that)
+                if (this.level.getMinBuildHeight() > maxY || this.level.getMaxBuildHeight() < minY) {
+                    return false;
+                }
+
+                for (int y = minY; y <= maxY; y++) {
+                    for (int z = minZ; z <= maxZ; z++) {
+                        for (int x = minX; x <= maxX; x++) {
+                            blockposition.set(x, y, z);
+                            BlockState blockState = this.level.getBlockState(blockposition);
+                            if (!blockState.isAir() && blockState.isSuffocating(this.level, blockposition)) {
+                                if (suffocationShape == null) {
+                                    suffocationShape = Shapes.box(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.minZ, axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.maxZ);
+                                }
+                                if (Shapes.joinIsNotEmpty(blockState.getCollisionShape(this.level, blockposition).
+                                                move(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
+                                        suffocationShape, BooleanOp.AND)) {
+                                    return true;
+                                }
+                            }
                         }
+                    }
+                }
+                return false;
+            } else {
+                for (int fz = minZ; fz <= maxZ; ++fz) {
+                    for (int fx = minX; fx <= maxX; ++fx) {
+                        for (int fy = minY; fy <= maxY; ++fy) {
+                            net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk) this.level.getChunkIfLoadedImmediately(fx >> 4, fz >> 4);
+                            if (chunk == null) {
+                                continue;
+                            }
 
-                        BlockState iblockdata = chunk.getBlockStateFinal(fx, fy, fz);
-                        blockposition.set(fx, fy, fz);
-                        if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).move((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()), Shapes.create(axisalignedbb), BooleanOp.AND)) {
-                            return true;
+                            BlockState iblockdata = chunk.getBlockStateFinal(fx, fy, fz);
+                            blockposition.set(fx, fy, fz);
+                            if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).move((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()), Shapes.create(axisalignedbb), BooleanOp.AND)) {
+                                return true;
+                            }
                         }
                     }
                 }
+                return false;
             }
-            return false;
         }
     }
+    // Fusion end
 
     public InteractionResult interact(Player player, InteractionHand hand) {
         return InteractionResult.PASS;
