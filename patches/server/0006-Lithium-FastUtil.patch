From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Mon, 17 Oct 2022 21:06:24 +0900
Subject: [PATCH] Lithium-FastUtil


diff --git a/src/main/java/com/github/ipecter/fusion/configuraions/LithiumConfig.java b/src/main/java/com/github/ipecter/fusion/configuraions/LithiumConfig.java
index c9ba665e2ade6c29168ada8da8b49ec6c64ecbcf..940c4f882f07d82eb642005a7d208c446379f06c 100644
--- a/src/main/java/com/github/ipecter/fusion/configuraions/LithiumConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/configuraions/LithiumConfig.java
@@ -9,9 +9,11 @@ public class LithiumConfig extends FusionConfig {
     }
 
     public static boolean lithiumEnable = true;
+    public static boolean lithiumFastUtil = true;
     private static void lithiumSettings() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
         lithiumEnable = getBoolean("lithium.enable", lithiumEnable);
+        lithiumFastUtil = getBoolean("lithium.fast-util", lithiumFastUtil);
     }
 
 }
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index 6c27b22dd1d497687c0f4d3835e34149bcf952c1..c9c0535ef4c84158400e8245a46ccf82a032de93 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -196,7 +196,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public Direction getOpposite() {
-        return from3DDataValue(this.oppositeIndex);
+        return com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumEnable && com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumFastUtil ? VALUES[this.oppositeIndex] : from3DDataValue(this.oppositeIndex); // Fusion - Lithium: FastUtil
     }
 
     public Direction getClockWise(Direction.Axis axis) {
@@ -458,7 +458,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public static Direction getRandom(RandomSource random) {
-        return Util.getRandom(VALUES, random);
+        return com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumEnable && com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumFastUtil ? VALUES[random.nextInt(VALUES.length)] :Util.getRandom(VALUES, random); // Fusion - Lithium: FastUtil
     }
 
     public static Direction getNearest(double x, double y, double z) {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index cfb2e46b34b2982d6724f18214557fc80cf4adfa..5ac81cbd7a09dac672cddc18eb2f150b71f34b9e 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -16,6 +16,17 @@ public class AABB {
     public final double maxY;
     public final double maxZ;
 
+    // Fusion start - Lithium: FastUtil
+    static {
+        if (com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumEnable && com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumFastUtil) {
+            assert Direction.Axis.X.ordinal() == 0;
+            assert Direction.Axis.Y.ordinal() == 1;
+            assert Direction.Axis.Z.ordinal() == 2;
+            assert Direction.Axis.values().length == 3;
+        }
+    }
+    // Fusion end
+
     public AABB(double x1, double y1, double z1, double x2, double y2, double z2) {
         this.minX = Math.min(x1, x2);
         this.minY = Math.min(y1, y2);
@@ -81,11 +92,41 @@ public class AABB {
     }
 
     public double min(Direction.Axis axis) {
-        return axis.choose(this.minX, this.minY, this.minZ);
+        // Fusion start - Lithium: FastUtil
+        if (com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumEnable && com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumFastUtil){
+            switch (axis.ordinal()) {
+                case 0: //X
+                   return this.minX;
+                case 1: //Y
+                    return this.minY;
+                case 2: //Z
+                    return this.minZ;
+            }
+            throw new IllegalArgumentException();
+        }
+        else{
+            return axis.choose(this.minX, this.minY, this.minZ);
+        }
+        // Fusion end
     }
 
     public double max(Direction.Axis axis) {
-        return axis.choose(this.maxX, this.maxY, this.maxZ);
+        // Fusion start - Lithium: FastUtil
+        if (com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumEnable && com.github.ipecter.fusion.configuraions.LithiumConfig.lithiumFastUtil){
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return this.maxX;
+                case 1: //Y
+                    return this.maxY;
+                case 2: //Z
+                    return this.maxZ;
+            }
+            throw new IllegalArgumentException();
+        }
+        else{
+            return axis.choose(this.maxX, this.maxY, this.maxZ);
+        }
+        // Fusion end
     }
 
     @Override
