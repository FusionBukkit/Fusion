From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 9 Nov 2022 19:37:13 +0900
Subject: [PATCH] Lithium-Chunk-FastAccess

Mirai - etil2jz - GPL 3.0
Lithium - CaffeineMC  - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
index baedc4d6cf89b2bfe0367116438c65af5668f519..05001d2717ff2f40f95742587e7876c1735e10c2 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
@@ -138,6 +138,7 @@ public class FusionWorldConfig {
     public boolean lithiumCollectionsEntityAttributes = true;
     public boolean lithiumEntityRaiderAI = true;
     public boolean lithiumBlockMovingBlockEntityShapes = true;
+    public boolean lithiumWorldFastChunkAccess = true;
 
     private void lithiumConfig() {
         lithiumEnable = getBoolean("lithium.enable", lithiumEnable);
@@ -148,6 +149,7 @@ public class FusionWorldConfig {
         lithiumCollectionsEntityAttributes = getBoolean("lithium.collections.entity-attributes", lithiumCollectionsEntityAttributes) && lithiumEnable;
         lithiumEntityRaiderAI = getBoolean("lithium.entity.raider-ai", lithiumEntityRaiderAI) && lithiumEnable;
         lithiumBlockMovingBlockEntityShapes = getBoolean("lithium.block.moving-block-entity-shapes", lithiumBlockMovingBlockEntityShapes) && lithiumEnable;
+        lithiumWorldFastChunkAccess = getBoolean("lithium.world.fast-chunk-access", lithiumWorldFastChunkAccess) && lithiumEnable;
     }
 
     private void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index c677a55db62b4d197eeb1bf5d929e24019fed5ec..730ea5545ef0ebe9b4b0015ab6c8510a971f51b5 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -82,6 +82,10 @@ public class WorldGenRegion implements WorldGenLevel {
     private Supplier<String> currentlyGenerating;
     private final AtomicLong subTickCount = new AtomicLong();
     private static final ResourceLocation WORLDGEN_REGION_RANDOM = new ResourceLocation("worldgen_region_random");
+    // Fusion start - Lithium: World Fast Chunk Access
+    private ChunkAccess[] chunksArr;
+    private int minChunkX, minChunkZ;
+    // Fusion end
 
     public WorldGenRegion(ServerLevel world, List<ChunkAccess> chunks, ChunkStatus status, int placementRadius) {
         this.generatingStatus = status;
@@ -104,6 +108,12 @@ public class WorldGenRegion implements WorldGenLevel {
             this.lastPos = ((ChunkAccess) chunks.get(chunks.size() - 1)).getPos();
             this.structureManager = world.structureManager().forWorldGenRegion(this);
         }
+        // Fusion start - Lithium: World Fast Chunk Access
+        this.minChunkX = this.firstPos.x;
+        this.minChunkZ = this.firstPos.z;
+
+        this.chunksArr = chunks.toArray(new ChunkAccess[0]);
+        // Fusion end
     }
 
     public boolean isOldChunkAround(ChunkPos chunkPos, int checkRadius) {
@@ -119,10 +129,36 @@ public class WorldGenRegion implements WorldGenLevel {
         this.currentlyGenerating = structureName;
     }
 
+    // Fusion start - Lithium: World Fast Chunk Access
+    /**
+     * @reason Use the chunk array for faster access
+     * @author SuperCoder7979, 2No2Name
+     */
     @Override
     public ChunkAccess getChunk(int chunkX, int chunkZ) {
-        return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+        if (this.level.fusionConfig.lithiumWorldFastChunkAccess) {
+            return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+        } else {
+            int x = chunkX - this.minChunkX;
+            int z = chunkZ - this.minChunkZ;
+            int w = this.size;
+
+            if (x >= 0 && z >= 0 && x < w && z < w) {
+                return this.chunksArr[x + z * w];
+            } else {
+                throw new NullPointerException("No chunk exists at " + new ChunkPos(chunkX, chunkZ));
+            }
+        }
+    }
+
+    /**
+     * Use our chunk fetch function
+     */
+    public ChunkAccess getChunk(BlockPos pos) {
+        // Skip checking chunk.getStatus().isAtLeast(ChunkStatus.EMPTY) here, because it is always true
+        return this.getChunk(me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getX()), me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getZ()));
     }
+    // Fusion end
 
     @Nullable
     @Override
@@ -179,10 +215,28 @@ public class WorldGenRegion implements WorldGenLevel {
     }
     // Paper end
 
+    // Fusion start - Lithium: World Fast Chunk Access
+    /**
+     * @reason Avoid pointer de-referencing, make method easier to inline
+     * @author JellySquid
+     */
     @Override
     public BlockState getBlockState(BlockPos pos) {
-        return this.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ())).getBlockState(pos);
+        if (this.level.fusionConfig.lithiumWorldFastChunkAccess) {
+            return this.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ())).getBlockState(pos);
+        } else {
+            int x = (me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getX())) - this.minChunkX;
+            int z = (me.jellysquid.mods.lithium.common.util.Pos.ChunkCoord.fromBlockCoord(pos.getZ())) - this.minChunkZ;
+            int w = this.size;
+
+            if (x >= 0 && z >= 0 && x < w && z < w) {
+                return this.chunksArr[x + z * w].getBlockState(pos);
+            } else {
+                throw new NullPointerException("No chunk exists at " + new ChunkPos(pos));
+            }
+        }
     }
+    // Fusion end
 
     @Override
     public FluidState getFluidState(BlockPos pos) {
@@ -296,13 +350,13 @@ public class WorldGenRegion implements WorldGenLevel {
         } else {
             // Paper start
             if (!org.purpurmc.purpur.PurpurConfig.loggerSuppressSetBlockFarChunk) // Purpur
-            if (!hasSetFarWarned) {
-            Util.logAndPauseIfInIde("Detected setBlock in a far chunk [" + i + ", " + j + "], pos: " + pos + ", status: " + this.generatingStatus + (this.currentlyGenerating == null ? "" : ", currently generating: " + (String) this.currentlyGenerating.get()));
-            hasSetFarWarned = true;
-            if (this.getServer() != null && this.getServer().isDebugging()) {
-                io.papermc.paper.util.TraceUtil.dumpTraceForThread("far setBlock call");
-            }
-            }
+                if (!hasSetFarWarned) {
+                    Util.logAndPauseIfInIde("Detected setBlock in a far chunk [" + i + ", " + j + "], pos: " + pos + ", status: " + this.generatingStatus + (this.currentlyGenerating == null ? "" : ", currently generating: " + (String) this.currentlyGenerating.get()));
+                    hasSetFarWarned = true;
+                    if (this.getServer() != null && this.getServer().isDebugging()) {
+                        io.papermc.paper.util.TraceUtil.dumpTraceForThread("far setBlock call");
+                    }
+                }
             // Paper end
             return false;
         }
