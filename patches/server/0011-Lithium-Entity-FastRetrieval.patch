From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 21 Dec 2022 15:52:42 +0900
Subject: [PATCH] Lithium-Entity-FastRetrieval


diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index 95d1b8aa162805b84ea8cb8a6a50fbad546d387b..b1b26019806f45b03672e5ca55ca77e72efb031c 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -207,12 +207,14 @@ public class FusionConfig {
     public static boolean lithiumEnable = true;
     public static boolean lithiumMathFastUtil = true;
     public static boolean lithiumMathBetterTrigonometry = true;
+    public static boolean lithiumEntityFastRetrieval = true;
 
     private static void lithiumConfig() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
         lithiumEnable = getBoolean("lithium.enable", lithiumEnable);
         lithiumMathFastUtil = getBoolean("lithium.math.fast-util", lithiumMathFastUtil) && lithiumEnable;
         lithiumMathBetterTrigonometry = getBoolean("lithium.math.better-trigonometry", lithiumMathBetterTrigonometry) && lithiumEnable;
+        lithiumEntityFastRetrieval = getBoolean("lithium.entity.fast-retrieval", lithiumEntityFastRetrieval) && lithiumEnable;
     }
 
     private static void lithiumConfigSetup() {
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index ee692b49c62f36287bf9d008861f5d47e0e42c00..7cf7f84f6445c0343e9f4e199429d3a2e9e632b6 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -32,8 +32,12 @@ public class EntitySectionStorage<T extends EntityAccess> {
         this.intialSectionVisibility = chunkStatusDiscriminator;
     }
 
+    // Fusion start - Lithium: Entity FastRetrieval
+    /**
+     * @author 2No2Name
+     * @reason avoid iterating through LongAVLTreeSet, possibly iterating over hundreds of irrelevant longs to save up to 8 hash set gets
+     */
     public void forEachAccessibleNonEmptySection(AABB box, AbortableIterationConsumer<EntitySection<T>> consumer) {
-        int i = 2;
         int j = SectionPos.posToSectionCoord(box.minX - 2.0D);
         int k = SectionPos.posToSectionCoord(box.minY - 4.0D);
         int l = SectionPos.posToSectionCoord(box.minZ - 2.0D);
@@ -41,6 +45,46 @@ public class EntitySectionStorage<T extends EntityAccess> {
         int n = SectionPos.posToSectionCoord(box.maxY + 0.0D);
         int o = SectionPos.posToSectionCoord(box.maxZ + 2.0D);
 
+        if (com.github.ipecter.fusion.FusionConfig.lithiumEntityFastRetrieval) {
+            if (m >= j + 4 || o >= l + 4) {
+                // Vanilla is likely more optimized when shooting entities with TNT cannons over huge distances.
+                // Choosing a cutoff of 4 chunk size, as it becomes more likely that these entity sections do not exist when
+                // they are far away from the shot entity (player despawn range, position maybe not on the ground, etc)
+
+                this.forEachAccessibleNonEmptySectionVanilla(j, k, l, m, n, o, consumer);
+                return;
+            } else {
+                // Vanilla order of the AVL long set is sorting by ascending long value. The x, y, z positions are packed into
+                // a long with the x position's lowest 22 bits placed at the MSB.
+                // Therefore the long is negative iff the 22th bit of the x position is set, which happens iff the x position
+                // is negative. A positive x position will never have its 22th bit set, as these big coordinates are far outside
+                // the world. y and z positions are treated as unsigned when sorting by ascending long value, as their sign bits
+                // are placed somewhere inside the packed long
+
+                for (int x = j; x <= m; x++) {
+                    for (int z = Math.max(l, 0); z <= o; z++) {
+                        if (this.forEachInColumn(x, k, n, z, consumer).shouldAbort()) {
+                            this.forEachAccessibleNonEmptySectionVanilla(j, k, l, m, n, o, consumer);
+                            return;
+                        }
+                    }
+
+                    int bound = Math.min(-1, o);
+                    for (int z = l; z <= bound; z++) {
+                        if (this.forEachInColumn(x, k, n, z, consumer).shouldAbort()) {
+                            this.forEachAccessibleNonEmptySectionVanilla(j, k, l, m, n, o, consumer);
+                            return;
+                        }
+                    }
+                }
+            }
+        } else {
+            this.forEachAccessibleNonEmptySectionVanilla(j, k, l, m, n, o, consumer);
+            return;
+        }
+    }
+
+    private void forEachAccessibleNonEmptySectionVanilla(int j, int k, int l, int n, int m, int o, AbortableIterationConsumer<EntitySection<T>> consumer) {
         for(int p = j; p <= m; ++p) {
             long q = SectionPos.asLong(p, 0, 0);
             long r = SectionPos.asLong(p, -1, -1);
@@ -58,8 +102,33 @@ public class EntitySectionStorage<T extends EntityAccess> {
                 }
             }
         }
+    }
+
+    private AbortableIterationConsumer.Continuation forEachInColumn(int x, int k, int n, int z, AbortableIterationConsumer<EntitySection<T>> action) {
+        AbortableIterationConsumer.Continuation ret = AbortableIterationConsumer.Continuation.CONTINUE;
+        //y from negative to positive, but y is treated as unsigned
+        for (int y = Math.max(k, 0); y <= n; y++) {
+            if ((ret = this.consumeSection(SectionPos.asLong(x, y, z), action)).shouldAbort()) {
+                return ret;
+            }
+        }
+        int bound = Math.min(-1, n);
+        for (int y = k; y <= bound; y++) {
+            if ((ret = this.consumeSection(SectionPos.asLong(x, y, z), action)).shouldAbort()) {
+                return ret;
+            }
+        }
+        return ret;
+    }
 
+    private AbortableIterationConsumer.Continuation consumeSection(long pos, AbortableIterationConsumer<EntitySection<T>> action) {
+        EntitySection<T> entitySection = this.getSection(pos);
+        if (entitySection != null && 0 != entitySection.size() && entitySection.getStatus().isAccessible()) {
+            return action.accept(entitySection);
+        }
+        return AbortableIterationConsumer.Continuation.CONTINUE;
     }
+    // Fusion end
 
     public LongStream getExistingSectionPositionsInChunk(long chunkPos) {
         int i = ChunkPos.getX(chunkPos);
