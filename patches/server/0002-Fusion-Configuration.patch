From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Tue, 4 Oct 2022 13:23:36 +0900
Subject: [PATCH] Fusion-Configuration


diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..98d75d1c70ff4bfceb070216fbacb610f0cddbe5
--- /dev/null
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -0,0 +1,151 @@
+package com.github.ipecter.fusion;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import com.github.ipecter.fusion.command.FusionCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class FusionConfig {
+    private static final String HEADER = "This is the main configuration file for Fusion.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+            + "with caution, and make sure you know what each option does before configuring.\n"
+            + "\n"
+            + "If you need help with the configuration or have any questions related to Fusion,\n"
+            + "join us in our Discord guild.\n";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+                config.load(CONFIG_FILE);
+            } catch (IOException ignore) {
+            } catch (InvalidConfigurationException ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Could not load fusion.yml, please correct your syntax errors", ex);
+                throw Throwables.propagate(ex);
+            }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+                commands = new HashMap<>();
+        commands.put("fusion", new FusionCommand("fusion"));
+
+                version = getInt("config-version", 1);
+        set("config-version", 1);
+
+                readConfig(FusionConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+                log(Level.INFO, s);
+            }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+                MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Fusion", entry.getValue());
+            }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+                if (Modifier.isPrivate(method.getModifiers())) {
+                        if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                                try {
+                                        method.setAccessible(true);
+                                        method.invoke(instance);
+                                    } catch (InvocationTargetException ex) {
+                                        throw Throwables.propagate(ex.getCause());
+                                    } catch (Exception ex) {
+                                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                                    }
+                            }
+                    }
+            }
+
+                try {
+                config.save(CONFIG_FILE);
+            } catch (IOException ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+            }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+                config.addDefault(path, def);
+                return def;
+            }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+                for (String key : section.getKeys(false)) {
+                        Object obj = section.get(key);
+                        if (obj != null) {
+                                builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                            }
+                    }
+            }
+        return builder.build();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..a23954eb289b54b55dce4005dc901da97a03079d
--- /dev/null
+++ b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
@@ -0,0 +1,77 @@
+package com.github.ipecter.fusion;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.function.Predicate;
+
+import static com.github.ipecter.fusion.FusionConfig.log;
+
+@SuppressWarnings("unused")
+public class FusionWorldConfig {
+
+    private final String worldName;
+
+    public FusionWorldConfig(String worldName) {
+        this.worldName = worldName;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        FusionConfig.readConfig(FusionWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        FusionConfig.config.addDefault("world-settings.default." + path, val);
+        FusionConfig.config.set("world-settings.default." + path, val);
+        if (FusionConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            FusionConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            FusionConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = FusionConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : FusionConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private String getString(String path, String def) {
+        FusionConfig.config.addDefault("world-settings.default." + path, def);
+        return FusionConfig.config.getString("world-settings." + worldName + "." + path, FusionConfig.config.getString("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        FusionConfig.config.addDefault("world-settings.default." + path, def);
+        return FusionConfig.config.getBoolean("world-settings." + worldName + "." + path, FusionConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        FusionConfig.config.addDefault("world-settings.default." + path, def);
+        return FusionConfig.config.getDouble("world-settings." + worldName + "." + path, FusionConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        FusionConfig.config.addDefault("world-settings.default." + path, def);
+        return FusionConfig.config.getInt("world-settings." + worldName + "." + path, FusionConfig.config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        FusionConfig.config.addDefault("world-settings.default." + path, def);
+        return FusionConfig.config.getList("world-settings." + worldName + "." + path, FusionConfig.config.getList("world-settings.default." + path));
+    }
+
+    private Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = FusionConfig.getMap("world-settings.default." + path, def);
+        final Map<String, Object> value = FusionConfig.getMap("world-settings." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/github/ipecter/fusion/command/FusionCommand.java b/src/main/java/com/github/ipecter/fusion/command/FusionCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..8151603e5140b2cd677f22b702ddd841aae76f43
--- /dev/null
+++ b/src/main/java/com/github/ipecter/fusion/command/FusionCommand.java
@@ -0,0 +1,68 @@
+package com.github.ipecter.fusion.command;
+
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.md_5.bungee.api.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import com.github.ipecter.fusion.FusionConfig;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class FusionCommand extends Command {
+    public FusionCommand(String name) {
+        super(name);
+        this.description = "Fusion related commands";
+        this.usageMessage = "/fusion [ reload / version ]";
+        this.setPermission("bukkit.command.fusion");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+        String prefix = ChatColor.of("0056ff") + "《" + ChatColor.of("164cff") + " " + ChatColor.of("2b43ff") + "F" + ChatColor.of("4139ff") + "u" + ChatColor.of("5730ff") + "s" + ChatColor.of("6c26ff") + "i" + ChatColor.of("821dff") + "o" + ChatColor.of("9813ff") + "n" + ChatColor.of("ad0aff") + " " + ChatColor.of("c300ff") + "》";
+
+        if (args.length != 1) {
+            sender.sendMessage(prefix + ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, prefix + ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, prefix + ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            FusionConfig.init((File) console.options.valueOf("fusion-settings"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.fusionConfig.init();
+                level.resetBreedingCooldowns();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, prefix + ChatColor.GREEN + "Fusion config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a029f51983bcfe49beab1359f282f0f957723ef2..a7ac224a45cc4daf58ef11cd8f4435a439fbd8c5 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -232,6 +232,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Fusion start
+        try {
+            com.github.ipecter.fusion.FusionConfig.init((java.io.File) options.valueOf("fusion-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        com.github.ipecter.fusion.FusionConfig.registerCommands();
+        // Fusion end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index cf8693d02de53f1e02d55936f889c5724889e3f5..c8f0b1015d9cb0109818a9a5e3ff6a016c0ac458 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -175,6 +175,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final com.github.ipecter.fusion.FusionWorldConfig fusionConfig; // Fusion
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
@@ -331,6 +332,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.fusionConfig = new com.github.ipecter.fusion.FusionWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Fusion
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 02487d0d99ccae693815cd049a8e32a0ab20c8b1..1500ac56f2b01a2f93348ea48b5f0139bb1462f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -998,6 +998,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        com.github.ipecter.fusion.FusionConfig.init((File) console.options.valueOf("fusion-settings")); // Fusion
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1014,6 +1015,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.fusionConfig.init(); // Fusion
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2837,6 +2839,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Fusion start
+        @Override
+        public YamlConfiguration getFusionConfig() {
+            return com.github.ipecter.fusion.FusionConfig.config;
+        }
+        // Fusion end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 8a4c8701122edf2f29edbe97e4fa199da2744e9e..51ec0ad79b8a90dacbc92b98c859a05c3189c58e 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -180,6 +180,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Fusion start
+                acceptsAll(asList("fusion", "fusion-settings"), "File for fusion settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("fusion.yml"))
+                        .describedAs("Yml file");
+                // Fusion end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
